name: ODIS Data Pipeline

on:
  workflow_dispatch:
    inputs:
      domains:
        description: 'Specific domains to run (comma-separated, leave empty for all domains)'
        required: false
        default: ''

env:
  PYTHON_VERSION: "3.13"
  SCW_OBJECT_STORAGE_ENDPOINT: ${{ secrets.SCW_OBJECT_STORAGE_ENDPOINT }}
  SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
  SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
  PG_DB_USER: ${{ secrets.PG_DB_USER }}
  PG_DB_PWD: ${{ secrets.PG_DB_PWD }}
  PG_DB_HOST: ${{ secrets.PG_DB_HOST }}
  PG_DB_PORT: ${{ secrets.PG_DB_PORT }}

jobs:
  prepare:
    environment: prod
    runs-on: ubuntu-latest
    outputs:
      domains: ${{ steps.set-domains.outputs.domains }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python
      
      - name: Determine domains to process
        id: set-domains
        run: |
          if [ -n "${{ github.event.inputs.domains }}" ]; then
            echo "Using manually specified domains: ${{ github.event.inputs.domains }}"
            echo "domains=$(echo '${{ github.event.inputs.domains }}' | jq -R -c 'split(",") | map(select(length > 0))')" >> "$GITHUB_OUTPUT"
          else
            # Parse all domains from the config file and format as JSON array
            DOMAINS=$(poetry run python -c "import yaml, json; print(json.dumps(list(yaml.safe_load(open('datasources.yaml')).get('domains', {}).keys())))")
            echo "Using all domains from config"
            echo "domains=$DOMAINS" >> "$GITHUB_OUTPUT"
          fi

  extract:
    environment: prod
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        domain: ${{ fromJson(needs.prepare.outputs.domains) }}
    
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python
      - uses: ./.github/actions/setup-env
      
      - name: Run extract for domain ${{ matrix.domain }}
        id: extract
        continue-on-error: true
        run: |
          poetry run python bin/odis.py extract -d ${{ matrix.domain }}

  load:
    environment: prod
    needs: [prepare, extract]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        domain: ${{ fromJson(needs.prepare.outputs.domains) }}
    
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python
      - uses: ./.github/actions/setup-env
      
      - name: Download extracted data
        uses: actions/download-artifact@v4
        with:
          name: extracted-data-${{ matrix.domain }}
          path: data/extracts/${{ matrix.domain }}
      
      - name: Run load for domain
        id: load
        continue-on-error: true
        run: poetry run python bin/odis.py load -d ${{ matrix.domain }}

  summary:
    environment: prod
    needs: [load]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all status artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: status-*
          path: all-statuses
          merge-multiple: true
      
      - name: Generate execution report
        run: |
          Hello